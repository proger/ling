
TARGET := ling
ARCH := x86

ARCH_BITS := $(shell getconf LONG_BIT)

ifeq ($(ARCH_BITS),64)
OBJ_ARCH := elf64-x86-64
else
OBJ_ARCH := elf32-i386
endif

LING_VER := 0.2.3

XEN_INTERFACE_VERSION := 0x00030205

FULL_SPEED := 1
export FULL_SPEED

LING_HOSTNAME := "lost"

.PHONY: default
default: $(TARGET)
#default: $(TARGET) ling.peek

BUILD_ROOT := $(shell pwd)

LINKER_SCRIPT := arch/$(ARCH)/ling.lds

# Set using configure script?
UCLIBC_DIR := /usr/x86_64-linux-uclibc
NETTLE_DIR := /usr/local/lib64

PCRE_DIR := lib/pcre
LWIP_DIR := lib/lwip

CC := gcc

ASFLAGS := -D__ASSEMBLY__
ifeq ($(FULL_SPEED),1)
#CPPFLAGS := -DSUPPRESS_ASSERTS
CPPFLAGS := -DEXP_LINC_LATENCY
#CPPFLAGS := -DPROFILE_HARNESS
#CPPFLAGS += -DTRACE_HARNESS
#CPPFLAGS += -DEXP_COUNT_IOPS
#CPPFLAGS += -DEXP_RUNTIME_METRICS
else
CPPFLAGS := -DLING_DEBUG
CPPFLAGS += -DDEBUG_UNUSED_MEM
CPPFLAGS += -DTRACE_HARNESS
CPPFLAGS += -DPROFILE_HARNESS
CPPFLAGS += -DEXP_LINC_LATENCY
endif
CPPFLAGS += -D_ISOC99_SOURCE -D_GNU_SOURCE
CPPFLAGS += -isystem $(UCLIBC_DIR)/usr/include
CPPFLAGS += -isystem $(PCRE_DIR)
CPPFLAGS += -iquote $(LWIP_DIR)/src/include
CPPFLAGS += -iquote $(LWIP_DIR)/src/include/ipv4
CPPFLAGS += -iquote $(LWIP_DIR)/src/include/ipv6
CPPFLAGS += -iquote $(LWIP_DIR)/ling
CPPFLAGS += -iquote include -iquote arch/$(ARCH)/include
CPPFLAGS += -iquote bignum
CPPFLAGS += -D__XEN_INTERFACE_VERSION__=$(XEN_INTERFACE_VERSION)
CPPFLAGS += -DLING_VER=$(LING_VER)
CPPFLAGS += -DLING_HOSTNAME=$(LING_HOSTNAME)

ifeq ($(FULL_SPEED),1)
CFLAGS := -Wall -Werror -std=gnu99 -O3 -Wno-nonnull -Wno-strict-aliasing
else
CFLAGS := -Wall -Werror -std=gnu99 -g 
endif
# suppress warnings regarding %llu
CFLAGS += -Wno-format
#CFLAGS += -msse2 -mfpmath=sse
#CFLAGS += -frounding-math

LDFLAGS := -T $(LINKER_SCRIPT)
LDFLAGS += -nostdlib
LDFLAGS += -L $(UCLIBC_DIR)/usr/lib
LDFLAGS += -L $(NETTLE_DIR)
LDFLAGS += -Xlinker --build-id=none
LDFLAGS += -Xlinker -Map=ling.map
LDFLAGS += -static
LDFLAGS += -L $(PCRE_DIR)/.libs
LDFLAGS_FINAL := -lnettle -lpcre -lgcc -lc -lm
LDFLAGS += -L $(LWIP_DIR)
LDFLAGS_FINAL += -llwip

STARTUP_OBJ := $(patsubst %.S,%.o,arch/$(ARCH)/startup.S)

OBJS := $(patsubst %.c,%.o,$(wildcard *.c))
ARCH_OBJS := $(patsubst %.c,%.o,$(wildcard arch/$(ARCH)/*.c))
BIGNUM_OBJS := $(patsubst %.c,%.o,$(wildcard bignum/*.c))

IOPSTAB := spec/iops.tab
LINGMAINTPL := spec/ling_main_c.et

GEN_BEAMS := mod/atoms.erl mod/iops_tab.erl mod/exp_tab.erl mod/ling_bifs.erl
BEAMS := $(patsubst %.erl,%.beam,$(sort $(wildcard mod/*.erl) $(GEN_BEAMS)))
PREMODS := $(patsubst %.erl,%.beam,$(wildcard preload/*.erl))

STDLIB_BEAMS := $(patsubst app/stdlib/src/%.erl,app/stdlib/ebin/%.beam,$(wildcard app/stdlib/src/*.erl))
$(STDLIB_BEAMS): app/stdlib/ebin/%.beam: app/stdlib/src/%.erl
	erlc $(ERLC_FLAGS) -o app/stdlib/ebin $<

app/kernel/src/ling_%.erl: mod/ling_%.erl
	cp $< $@

KERNEL_BEAMS := $(patsubst app/kernel/src/%.erl,app/kernel/ebin/%.beam,$(wildcard app/kernel/src/*.erl))
$(KERNEL_BEAMS): app/kernel/ebin/%.beam: app/kernel/src/%.erl
	erlc $(ERLC_FLAGS) -o app/kernel/ebin $<

CRYPTO_BEAMS := $(patsubst app/crypto/src/%.erl,app/crypto/ebin/%.beam,$(wildcard app/crypto/src/*.erl))
$(CRYPTO_BEAMS): app/crypto/ebin/%.beam: app/crypto/src/%.erl
	erlc $(ERLC_FLAGS) -o app/crypto/ebin $<

OS_MON_BEAMS := $(patsubst app/os_mon/src/%.erl,app/os_mon/ebin/%.beam,$(wildcard app/os_mon/src/*.erl))
$(OS_MON_BEAMS): app/os_mon/ebin/%.beam: app/os_mon/src/%.erl
	erlc $(ERLC_FLAGS) -o app/os_mon/ebin $<

TEST_BEAMS := $(patsubst test/%.erl,test/ebin/%.beam,$(wildcard test/*.erl))
$(TEST_BEAMS): test/ebin/%.beam: test/%.erl
	erlc $(ERLC_FLAGS) -o test/ebin $<

TEST_LINGS := $(patsubst test/%.erl,test/ebin/%.ling,$(wildcard test/*.erl))
$(TEST_LINGS): %.ling: %.beam
	spec/beam2ling $< $@

#
# When adding custom module implementations for applications other than stdlib
# and kernel create directory structure similar to app/stdlib and add rules
# similar to the above rules for stdlib. Also add the application beam files to
# the APP_BEAMS.
#
APP_BEAMS := $(STDLIB_BEAMS) $(KERNEL_BEAMS) $(CRYPTO_BEAMS) $(OS_MON_BEAMS)

IMP_BEAMS := $(wildcard import/*/*.beam)
IMP_LINGS := $(patsubst %.beam,%.ling,$(IMP_BEAMS))

##
## find shell command picks up dotfiles. wildcard builtin function does not.
##
IMPORTS := $(patsubst %.beam,%.ling,$(shell find -L import/ -maxdepth 2 -type f))

t:
	@echo $(IMPORTS)

.PHONY: import_objs embed_objs imp_lings

imp_lings: $(IMP_BEAMS)
	spec/tooling $^

embed_objs: $(IMPORTS) imp_lings
	@rm embed/* || true
	@for i in $^; do \
		d=`echo $$i | awk -F / '{ print $$2; }'`; \
		f=`echo $$i | awk -F / '{ print $$3; }'`; \
		cd import/$$d; \
		objcopy -I binary -O $(OBJ_ARCH) -B i386 \
			--prefix-symbols=$$d \
			$$f $(BUILD_ROOT)/embed/$$d-$$f.o; \
		cd ../..; \
		echo Embed $$d/$$f; \
	done

import_objs: $(IMP_LINGS) embed_objs

ALL_OBJS := $(OBJS) $(ARCH_OBJS) $(BIGNUM_OBJS) \
	preload/literals.o

$(STARTUP_OBJ): %.o: %.S
	$(CC) $(ASFLAGS) $(CPPFLAGS) -c $< -o $@

# Stop iops reordering in ling_main.o
#
OBJS1 := $(filter-out ling_main.o,$(OBJS))
$(OBJS1) $(ARCH_OBJS) $(LIB_OBJS) $(BIGNUM_OBJS): %.o: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -o $@ -c $<

ling_main.o: ling_main.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -fno-reorder-blocks -o $@ -c $<

preload/literals.o: preload/literals.bin
	objcopy -I binary -O $(OBJ_ARCH) -B i386 \
		--redefine-sym _binary_preload_literals_bin_start=literals_blob_start \
		--redefine-sym _binary_preload_literals_bin_end=literals_blob_end \
		--redefine-sym _binary_preload_literals_bin_size=literals_blob_size \
	   	$< $@

$(BEAMS): %.beam: %.erl
	erlc $(ERLC_FLAGS) -o mod $<

$(PREMODS): %.beam: %.erl
	erlc $(ERLC_FLAGS) -o preload $<

atoms.o: atoms.inc

preload/erlang.beam: preload/bifs.inc

$(ALL_OBJS): include/atom_defs.h

mod/exp_tab.erl: $(PREMODS) mod/ling_bifs.beam
	spec/exptab_gen preload spec/bif.tab $@

include/atom_defs.h atoms.inc mod/atoms.erl: spec/atoms.tab \
		mod/exp_tab.beam mod/ling_iopvars.beam
	spec/atoms_gen spec/atoms.tab preload \
		include/atom_defs.h atoms.inc mod/atoms.erl

include/bif.h mod/ling_bifs.erl preload/bifs.inc: spec/bif.tab
	spec/bifs_gen spec/bif.tab include/bif.h mod/ling_bifs.erl preload/bifs.inc

mod/iops_tab.erl: $(IOPSTAB)
	spec/iops_gen $(IOPSTAB) $@

iopvars:
	spec/iopvars_gen spec/beam.src spec/bif.tab spec/iopvars.tab
	-rm spec/hot_cold_iops
	spec/reorder_iopvars spec/iopvars.tab spec/hot_cold_iops mod/ling_iopvars.erl

reorder:
	spec/reorder_iopvars spec/iopvars.tab spec/hot_cold_iops mod/ling_iopvars.erl

ifeq ($(ARCH_BITS),64)
PMG_OPTS := copy
endif

premod.inc code_base.inc include/mod_info.inc preload/literals.bin catch_tab.inc: \
				mod/atoms.beam mod/exp_tab.beam include/atom_defs.h $(PREMODS)
	spec/premod_gen preload \
		premod.inc code_base.inc include/mod_info.inc preload/literals.bin catch_tab.inc $(PMG_OPTS)

embed.inc:
	spec/embed_gen import embed.inc

embed.o: embed.inc

code_base.o: code_base.inc embed.inc include/mod_info.inc

catch_tab.o: catch_tab.inc

ling_main.c: $(LINGMAINTPL) mod/ling_iops.beam mod/ling_iopvars.beam \
					premod.inc include/mod_info.inc
	spec/ling_main_gen spec/hot_cold_iops

$(LWIP_DIR)/liblwip.a:
	make -C $(LWIP_DIR)

#ling.peek: $(TARGET)
#	objdump -S $(TARGET) > $@

TARGET_DEPS_EXTRA := $(TEST_LINGS)

ifeq ($(TCPIP_NETWORKING),lwip)
TARGET_DEPS_EXTRA += $(LWIP_DIR)/liblwip.a
endif

$(TARGET): $(STARTUP_OBJ) $(ALL_OBJS) $(APP_BEAMS) import_objs $(TARGET_DEPS_EXTRA)
	$(CC) $(LDFLAGS) -o $(TARGET) $(STARTUP_OBJ) $(ALL_OBJS) $(wildcard embed/*.o) $(LDFLAGS_FINAL)

inject-clean:
	rm -rf inject/*
	rm -f import/*

# discovered try-n-error: use a better build tool?
build-service:
	rm -f embed.inc
	make imp_lings
	make

.PHONY: docs
docs:
	spec/make_docs

define all_sources
     (find . -follow -name '*.[chS]' -print)
endef

.PHONY: cscope
cscope:
	$(all_sources) > cscope.files
	cscope -k -b -q

